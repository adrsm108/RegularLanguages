(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    132120,       2713]
NotebookOptionsPosition[    122824,       2544]
NotebookOutlinePosition[    127547,       2643]
CellTagsIndexPosition[    127441,       2638]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Internal`Restart", "[", "]"}]], "Input",
 CellChangeTimes->{{3.84836743958258*^9, 3.848367443452422*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"04ca7c67-29a0-41e3-8422-5c8c906c906c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "RegularLanguages`"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.847828997223902*^9, 3.8478290174648447`*^9}, {
  3.8478295790219345`*^9, 3.8478295858069105`*^9}, {3.847830767823578*^9, 
  3.8478307696736507`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"f3cc5d9e-1a12-45f9-9c65-ef2b7f7fe525"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeHeadingLink", "[", "x_", "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{
   "\"\<[\>\"", ",", "x", ",", "\"\<](#\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"x", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"WhitespaceCharacter", ".."}], ":>", "\"\<-\>\""}], "}"}]}], 
     "]"}], ",", "\"\<)\>\""}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8483506238533487`*^9, 3.8483506291739607`*^9}, {
  3.8483506771255646`*^9, 3.8483507199077563`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"36b48813-da7f-4bf8-b360-230a46163bce"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"saveGraph", "[", "dest_", "]"}], "[", "g_", "]"}], ":=", 
    RowBox[{"Export", "[", 
     RowBox[{"dest", ",", 
      RowBox[{"Graph", "[", 
       RowBox[{"g", ",", 
        RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], "]"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"packageNames", "=", 
   RowBox[{"Sort", "@", 
    RowBox[{"Names", "[", "\"\<RegularLanguages`*\>\"", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"packageNamePattern", "=", 
    RowBox[{"WordBoundary", "~~", 
     RowBox[{"Alternatives", "@@", 
      RowBox[{"Reverse", "@", "packageNames"}]}], "~~", "WordBoundary"}]}], 
   ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"optionsMarkdown", "[", "name_", "]"}], " ", ":=", "\n", "  ", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"opts", "=", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{"x", ",", " ", 
           RowBox[{"Options", "[", "x", "]"}], ",", " ", "HoldAll"}], "]"}], 
         " ", "@@", "\n", "      ", 
         RowBox[{"MakeExpression", "[", 
          RowBox[{"name", ",", " ", "StandardForm"}], "]"}]}]}], "}"}], ",", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"opts", " ", "===", " ", 
         RowBox[{"{", "}"}]}], ",", " ", "\"\<\>\"", ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<\\n**Options:** \>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "@*", "First"}], "/@", " ", "opts"}], ",", 
            " ", "\"\<, \>\""}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"attributesMarkdown", "[", "name_", "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"attrs", "=", 
        RowBox[{"Attributes", "[", "name", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"attrs", "===", 
         RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<\\n**Attributes:** \>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"ToString", "/@", "attrs"}], ",", " ", "\"\<, \>\""}], 
           "]"}]}], "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getUsage", "[", "name_", "]"}], " ", ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"usage", "=", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", " ", 
          RowBox[{"x", "::", "usage"}], ",", " ", "HoldAll"}], "]"}], "@@", 
        "\n", "      ", 
        RowBox[{"MakeExpression", "[", 
         RowBox[{"name", ",", " ", "StandardForm"}], "]"}]}]}], "}"}], ",", 
     "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "usage", "]"}], "=!=", "String"}], ",", 
       "\"\<\>\"", ",", "usage"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getOptions", "[", "name_", "]"}], " ", ":=", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"Options", "[", "x", "]"}], ",", " ", "HoldAll"}], "]"}], " ", "@@",
     "\n", "      ", 
    RowBox[{"MakeExpression", "[", 
     RowBox[{"name", ",", " ", "StandardForm"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getOptions", "[", 
     RowBox[{"name_", ",", "opts_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", " ", 
       RowBox[{"Options", "[", 
        RowBox[{"x", ",", "opts"}], "]"}], ",", " ", "HoldAll"}], "]"}], " ", 
     "@@", "\n", "      ", 
     RowBox[{"MakeExpression", "[", 
      RowBox[{"name", ",", " ", "StandardForm"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"usageMarkdown", "[", "name_", "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"usage", ",", "options"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"usage", ",", "options"}], "}"}], "=", 
        RowBox[{"PadRight", "[", 
         RowBox[{
          RowBox[{"StringSplit", "[", 
           RowBox[{
            RowBox[{"getUsage", "[", "name", "]"}], ",", 
            RowBox[{
            "RegularExpression", "[", "\"\<\\\\nOptions:?\\\\s*\\\\n\>\"", 
             "]"}]}], "]"}], ",", "2", ",", "\"\<\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"StringRiffle", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"args", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"Union", "@", 
                    RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{"usageLine", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "RegularExpression", "[", 
                    "\"\<\\\\w*((?P<a>\\\\[[^[\\\\]]*(?P>a)*[^[\\\\]]*])+)\>\"\
", "]"}], "->", "\"\<$1\>\""}]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "RegularExpression", "[", 
                    "\"\<(?<!\\\")\\\\b[a-zA-Z]+\\\\b(?!\\\")\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "RegularExpression", "[", 
                    "\"\<(?<!\\\")\\\\b([a-zA-Z]+)\\\\d+\\\\b(?!\\\")\>\"", 
                    "]"}], ":>", 
                    RowBox[{"{", 
                    RowBox[{"\"\<$0\>\"", ",", 
                    RowBox[{"\"\<$1\>\"", "<>", "\"\<i\>\""}]}], "}"}]}]}], 
                    "\[IndentingNewLine]", "}"}]}], "]"}], "]"}]}], ",", 
                   RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], "]"}]}], 
                "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"StringReplace", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"StringReplace", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"StringReplace", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"StringReplace", "[", 
                    RowBox[{"usageLine", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "\"\<\[AliasIndicator]\>\"", ":>", "\"\<`Esc`\>\""}], ",", 
                    RowBox[{
                    "\"\<\[VerticalSeparator]\>\"", ":>", "\"\<|\>\""}], ",", 
                    RowBox[{"\"\<\\\\\>\"", "->", "\"\<\\\\\\\\\>\""}], ",", 
                    RowBox[{"\"\<`\>\"", "->", "\"\<\\\\`\>\""}], ",", 
                    RowBox[{"\"\<->\>\"", "->", "\"\<&rarr;\>\""}]}], "}"}]}],
                     "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"x", ":", 
                    RowBox[{"RegularExpression", "[", 
                    RowBox[{
                    "\"\<^\>\"", "<>", "name", "<>", 
                    "\"\<(?P<a>\\\\[[^[\\\\]]*(?P>a)*[^[\\\\]]*])*\>\""}], 
                    "]"}]}], ":>", 
                    RowBox[{"\"\<**\>\"", "<>", "x", "<>", "\"\<**\>\""}]}]}],
                     "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"x", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "WordBoundary", "~~", "args", "~~", "WordBoundary"}], 
                    ")"}]}], ":>", 
                    RowBox[{"\"\<*\>\"", "<>", "x", "<>", "\"\<*\>\""}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"name", ":>", "name"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"x", ":", "packageNamePattern"}], ":>", 
                    RowBox[{"makeHeadingLink", "[", "x", "]"}]}]}], "}"}]}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "RegularExpression", "[", "\"\<^(\\\\s+|$)\>\"", "]"}], 
                    "->", "\"\<$0\>\""}], ",", 
                   RowBox[{
                    RowBox[{
                    "RegularExpression", "[", "\"\<^Options:?\\\\s*$\>\"", 
                    "]"}], "->", "\"\<#### Options:\>\""}], ",", " ", 
                   RowBox[{"StartOfLine", "->", "\"\<- \>\""}]}], "}"}]}], 
                "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"usageLine", ",", 
               RowBox[{"StringSplit", "[", 
                RowBox[{"usage", ",", "\"\<\\n\>\""}], "]"}]}], "}"}]}], 
            "]"}], ",", "\[IndentingNewLine]", "\"\<\\n\>\""}], 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         "\"\<\\n\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"options", "===", "\"\<\>\""}], ",", "\"\<\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<\\n**Options:** \>\"", "<>", 
              RowBox[{"StringRiffle", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"ToString", "[", 
                   RowBox[{"#", ",", "InputForm"}], "]"}], "&"}], "/@", 
                 RowBox[{"Keys", "@", 
                  RowBox[{"getOptions", "[", "name", "]"}]}]}], ",", " ", 
                "\"\<, \>\""}], "]"}], "<>", "\"\<\\n\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"StringRiffle", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Table", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"StringReplace", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"StringReplace", "[", 
                    RowBox[{"option", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "\"\<\[AliasIndicator]\>\"", ":>", "\"\<`Esc`\>\""}], ",", 
                    RowBox[{
                    "\"\<\[VerticalSeparator]\>\"", ":>", "\"\<|\>\""}], ",", 
                    RowBox[{"\"\<\\\\\>\"", "->", "\"\<\\\\\\\\\>\""}], ",", 
                    RowBox[{"\"\<`\>\"", "->", "\"\<\\\\`\>\""}]}], "}"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "RegularExpression", "[", "\"\<^##### .*$\>\"", "]"}], 
                    "->", "\"\<$0\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "RegularExpression", "[", 
                    "\"\<(?m)^(\\\\s*)-\\\\s+([^:\\\\s]+):?\>\"", "]"}], 
                    "->", "\"\<$1- *$2:*\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "RegularExpression", "[", 
                    "\"\<(?m)^(\\\\s+(.*)?|#.*)?$\>\"", "]"}], "->", 
                    "\"\<$0\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{"StartOfLine", "->", "\"\<- \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"name", ":>", "name"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"x", ":", "packageNamePattern"}], ":>", 
                    RowBox[{"makeHeadingLink", "[", "x", "]"}]}]}], 
                    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                    "]"}], "\[IndentingNewLine]", ",", 
                   RowBox[{"{", 
                    RowBox[{"option", ",", "\[IndentingNewLine]", 
                    RowBox[{"StringSplit", "[", 
                    RowBox[{"options", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "RegularExpression", "[", 
                    "\"\<(?m)^(\\\\S*?)\\\\s*->\\\\s*(.*?)$\>\"", "]"}], ":>", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"a", "=", 
                    RowBox[{"Values", "@", 
                    RowBox[{"getOptions", "[", 
                    RowBox[{"name", ",", 
                    RowBox[{"ToExpression", "@", "\"\<$1\>\""}]}], "]"}]}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"\"\<**$1** &rarr; ($2)\>\"", "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"a", "===", 
                    RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
                    RowBox[{"\"\<, *default: \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{
                    RowBox[{"First", "@", "a"}], ",", "InputForm"}], "]"}], 
                    "<>", "\"\<*    \>\""}]}], "]"}]}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], "]"}], ",", "\[IndentingNewLine]", "\"\<\>\""}], 
                "]"}], ",", "\[IndentingNewLine]", "\"\<\\n\>\""}], "]"}]}], 
            "}"}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"createMarkdown", "[", "s_String", "]"}], " ", ":=", "\n", "  ", 
    RowBox[{"StringJoin", "[", 
     RowBox[{"\"\<\\n### \>\"", ",", "s", ",", "\[IndentingNewLine]", 
      RowBox[{"attributesMarkdown", "[", "s", "]"}], ",", "\"\<\\n\>\"", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"usageMarkdown", "[", "s", "]"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"exportUsages", "[", "dest_", "]"}], ":=", 
   RowBox[{"Export", "[", 
    RowBox[{"dest", ",", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"createMarkdown", "/@", "packageNames"}], "]"}], ",", 
     "\"\<Text\>\""}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"createREADME", "[", "dest_", "]"}], ":=", 
    RowBox[{"WithCleanup", "[", 
     RowBox[{
      RowBox[{"UseNotation", "[", "False", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"dest", ",", "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"md", "=", 
            RowBox[{"createMarkdown", "/@", "packageNames"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"StringReplace", "[", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{"\"\<README.md\>\"", ",", "\"\<Text\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"start", ":", 
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<^#\\\\s+Package Symbols\\\\s*$\>\"", "]"}]}], 
               "\[IndentingNewLine]", "~~", 
               RowBox[{"Shortest", "[", "__", "]"}], "\[IndentingNewLine]", "~~", 
               RowBox[{"end", ":", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                  "RegularExpression", "[", "\"\<^#\\\\s+\\\\w+\\\\s*$\>\"", 
                   "]"}], "~~", 
                  RowBox[{"__", "|", "EndOfString"}]}], ")"}]}]}], ":>", 
              "\[IndentingNewLine]", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"start", ",", "md", ",", "\"\<\\n\>\"", ",", "end"}], 
               "]"}]}], "}"}], ",", "\[IndentingNewLine]", "1"}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", "\"\<Text\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"UseNotation", "[", "True", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"preparePaclet", "[", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Needs", "[", "\"\<PacletTools`\>\"", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"CopyFile", "[", 
     RowBox[{"\"\<README.md\>\"", ",", "\"\<tmp/lastREADME.md\>\""}], "]"}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"createREADME", "[", "\"\<README.md\>\"", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"PacletBuild", "[", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<C:\\\\Files\\\\Adam\\\\Documents\\\\Code\\\\Wolfram\\\\\
RegularLanguages\>\"", ",", "\[IndentingNewLine]", 
      "\"\<C:\\\\Files\\\\Adam\\\\Documents\\\\Code\\\\Wolfram\\\\\
RegularLanguages\\\\dist\>\""}], "]"}]}], "\[IndentingNewLine]", 
   ")"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.84793328859017*^9, 3.8479333238952885`*^9}, 
   3.8479333601790915`*^9, {3.8479334040884256`*^9, 3.8479334153218083`*^9}, {
   3.8479366005341616`*^9, 3.847936631416215*^9}, {3.847936666797573*^9, 
   3.847936704527581*^9}, {3.847936856036002*^9, 3.8479368569040504`*^9}, {
   3.847937565046691*^9, 3.847937615400466*^9}, {3.8479376745442123`*^9, 
   3.8479378772303066`*^9}, {3.8479379341333475`*^9, 3.847937976910462*^9}, {
   3.8479380373962083`*^9, 3.8479381166822395`*^9}, {3.8479382777739854`*^9, 
   3.847938297006886*^9}, {3.8479383317961025`*^9, 3.8479383966267986`*^9}, {
   3.8479384336779823`*^9, 3.8479384363330555`*^9}, {3.847938524866399*^9, 
   3.847938571280016*^9}, {3.84793861117199*^9, 3.8479386430674567`*^9}, {
   3.8479387196381474`*^9, 3.8479387705927043`*^9}, {3.847938806387266*^9, 
   3.847938890091118*^9}, {3.8479389443166065`*^9, 3.847939000083809*^9}, {
   3.847939085179598*^9, 3.8479390887503586`*^9}, {3.8479391393426423`*^9, 
   3.8479391440851755`*^9}, {3.8479392070454035`*^9, 
   3.8479392265942025`*^9}, {3.8479392764341373`*^9, 3.847939277917238*^9}, {
   3.847939581161647*^9, 3.84793965373916*^9}, {3.8479396919799643`*^9, 
   3.847939785238335*^9}, {3.847939827089814*^9, 3.847939956811501*^9}, {
   3.847940136248248*^9, 3.847940204183079*^9}, {3.8479402350667224`*^9, 
   3.847940336671542*^9}, {3.8479405654339714`*^9, 3.8479405780977287`*^9}, {
   3.8479408213060155`*^9, 3.8479408315954847`*^9}, {3.847940875115859*^9, 
   3.8479408792670455`*^9}, {3.847941279318315*^9, 3.8479412901841383`*^9}, {
   3.847941325041605*^9, 3.847941344084081*^9}, {3.847941378506651*^9, 
   3.847941382510213*^9}, {3.847941719035149*^9, 3.84794173349472*^9}, {
   3.847941769025318*^9, 3.84794185127028*^9}, {3.8479419287430515`*^9, 
   3.847941937799569*^9}, {3.8479419682813187`*^9, 3.8479419859247785`*^9}, {
   3.8479421054123125`*^9, 3.8479421986057863`*^9}, {3.8479422337188196`*^9, 
   3.847942270693722*^9}, {3.8479423011073847`*^9, 3.8479423017741313`*^9}, {
   3.8479423435985017`*^9, 3.847942472548204*^9}, {3.8479429497509546`*^9, 
   3.847943046849698*^9}, 3.8479430964148283`*^9, 3.847943136372615*^9, {
   3.847943267212539*^9, 3.847943331915861*^9}, {3.847943462310463*^9, 
   3.8479434655170717`*^9}, {3.847943519415736*^9, 3.8479435977040606`*^9}, {
   3.8479436614005013`*^9, 3.8479436709620667`*^9}, {3.8479438557070584`*^9, 
   3.8479438686110992`*^9}, {3.847943950363951*^9, 3.8479439524976864`*^9}, {
   3.8479439938003626`*^9, 3.847943998462599*^9}, {3.847944193973894*^9, 
   3.8479445482003474`*^9}, {3.8479832810900354`*^9, 3.847983282446346*^9}, {
   3.84798331947429*^9, 3.847983334866684*^9}, {3.8479833649828672`*^9, 
   3.8479834147471514`*^9}, {3.8479834478397255`*^9, 3.847983464480471*^9}, {
   3.8479835383914733`*^9, 3.8479835494948378`*^9}, {3.847983772127586*^9, 
   3.8479839183173137`*^9}, {3.84798395605612*^9, 3.847983957550251*^9}, {
   3.847984020967091*^9, 3.847984023833951*^9}, 3.847984161640557*^9, {
   3.847984235341454*^9, 3.847984288433343*^9}, {3.847984390946285*^9, 
   3.847984434231439*^9}, {3.847984582081912*^9, 3.847984607917029*^9}, {
   3.847984653682439*^9, 3.847984695526176*^9}, {3.847984795197137*^9, 
   3.847984832183443*^9}, {3.847985118466864*^9, 3.8479851552493505`*^9}, {
   3.8479852170406294`*^9, 3.8479852209668217`*^9}, {3.8479853017888465`*^9, 
   3.8479853067896204`*^9}, {3.8479853834294543`*^9, 3.847985449485108*^9}, {
   3.847985495961981*^9, 3.847985500346904*^9}, {3.8479855462382317`*^9, 
   3.8479855482499585`*^9}, {3.8479857322305326`*^9, 3.847985733993329*^9}, {
   3.8479858957450275`*^9, 3.84798589970739*^9}, {3.847985940176156*^9, 
   3.8479860788336115`*^9}, {3.8479861202402987`*^9, 
   3.8479861345168695`*^9}, {3.847986280698059*^9, 3.847986315492445*^9}, {
   3.847986352633602*^9, 3.847986522500184*^9}, {3.847986555009613*^9, 
   3.8479867119000163`*^9}, {3.8479867492563963`*^9, 
   3.8479867971971474`*^9}, {3.847986845140099*^9, 3.847986915894491*^9}, {
   3.847986968670092*^9, 3.847986969385788*^9}, {3.847987017609661*^9, 
   3.847987047783744*^9}, {3.847987088733397*^9, 3.847987151840151*^9}, {
   3.8479871920464907`*^9, 3.8479872187695837`*^9}, {3.8479872684381657`*^9, 
   3.847987274937256*^9}, {3.8479874031503143`*^9, 3.8479874954049025`*^9}, {
   3.847987618428585*^9, 3.8479876458276286`*^9}, {3.847988516968432*^9, 
   3.8479885952170687`*^9}, {3.847988626843542*^9, 3.8479886647836475`*^9}, {
   3.847988977224454*^9, 3.8479890154396405`*^9}, {3.847989070863856*^9, 
   3.8479892116610694`*^9}, {3.847989245848383*^9, 3.847989538483552*^9}, {
   3.847989577252909*^9, 3.847989678751402*^9}, {3.847989715089371*^9, 
   3.8479898441004653`*^9}, {3.8479899224487343`*^9, 3.84798993679364*^9}, {
   3.847989970111943*^9, 3.847989973527602*^9}, {3.847991399618352*^9, 
   3.8479914654702377`*^9}, {3.847991565466948*^9, 3.8479915774504423`*^9}, {
   3.847991990457681*^9, 3.847992022775817*^9}, {3.84799208844916*^9, 
   3.8479921508501277`*^9}, {3.8479922193609533`*^9, 
   3.8479923030170946`*^9}, {3.8479925673920393`*^9, 
   3.8479926383754497`*^9}, {3.847992985300912*^9, 3.8479929871472273`*^9}, {
   3.8479930429541426`*^9, 3.847993049534171*^9}, 3.8479931417097116`*^9, {
   3.8480071442458773`*^9, 3.8480071539680824`*^9}, {3.848007433341627*^9, 
   3.8480075490817027`*^9}, {3.84800788091628*^9, 3.84800788889962*^9}, {
   3.848007990679593*^9, 3.8480079929660783`*^9}, 3.8480080854333887`*^9, {
   3.848008124523469*^9, 3.848008137793827*^9}, {3.8480081979538927`*^9, 
   3.8480082372766504`*^9}, {3.84800831520652*^9, 3.8480083153667912`*^9}, {
   3.8480083747196665`*^9, 3.8480083748502636`*^9}, {3.848008433152521*^9, 
   3.8480085243650236`*^9}, {3.848008590014862*^9, 3.848008590566907*^9}, {
   3.848008633410321*^9, 3.8480086531514783`*^9}, {3.84800869975016*^9, 
   3.848008732299781*^9}, {3.8480088479765615`*^9, 3.8480088583502693`*^9}, {
   3.8480088951815324`*^9, 3.8480089288337545`*^9}, {3.8480090043159337`*^9, 
   3.848009008539152*^9}, 3.8480092358398447`*^9, {3.848011649466741*^9, 
   3.848011676482948*^9}, {3.848011723933361*^9, 3.848011796296418*^9}, {
   3.8480193142287807`*^9, 3.8480193565144477`*^9}, {3.848027875733677*^9, 
   3.8480279133056707`*^9}, {3.848028235750045*^9, 3.8480282733535852`*^9}, {
   3.848028365883896*^9, 3.8480283693380103`*^9}, {3.848028429317088*^9, 
   3.848028505229183*^9}, {3.848028588540056*^9, 3.848028593094116*^9}, {
   3.8480286490921073`*^9, 3.8480286849241467`*^9}, {3.8480287529474897`*^9, 
   3.848028778455503*^9}, {3.848028816093802*^9, 3.8480288197500525`*^9}, {
   3.8480730801731877`*^9, 3.8480734819125586`*^9}, {3.848073597682572*^9, 
   3.8480736591386323`*^9}, {3.848073698719984*^9, 3.848073719681679*^9}, {
   3.848073758819053*^9, 3.848073911619105*^9}, {3.8480739616213484`*^9, 
   3.84807402097021*^9}, 3.8480742960790434`*^9, {3.8480743322094927`*^9, 
   3.848074350500455*^9}, {3.8480805495461297`*^9, 3.8480805498439445`*^9}, {
   3.84808084583255*^9, 3.8480808586968613`*^9}, {3.8480808924766383`*^9, 
   3.8480809329292574`*^9}, {3.8480813644958816`*^9, 
   3.8480814175410275`*^9}, {3.8480815616139135`*^9, 3.848081587660269*^9}, {
   3.8480816366529903`*^9, 3.8480816952971573`*^9}, {3.8480817399661074`*^9, 
   3.848081744847181*^9}, {3.848081794602454*^9, 3.8480817951368794`*^9}, {
   3.8480818265488815`*^9, 3.8480818525512853`*^9}, {3.8480818954523077`*^9, 
   3.848081896728503*^9}, {3.8480819336413717`*^9, 3.8480819340538344`*^9}, {
   3.848082047249684*^9, 3.8480820732489614`*^9}, {3.848082130467263*^9, 
   3.8480821384200926`*^9}, {3.84808229317531*^9, 3.8480823076303353`*^9}, {
   3.848082341186895*^9, 3.8480823984971023`*^9}, 3.8480824726457405`*^9, {
   3.8480825037348485`*^9, 3.8480825248036537`*^9}, {3.848342346293564*^9, 
   3.8483423490251713`*^9}, 3.8483425366294136`*^9, {3.8483426145177927`*^9, 
   3.848342860489998*^9}, 3.848342939470016*^9, {3.848342975502968*^9, 
   3.848343022390116*^9}, {3.848343097623961*^9, 3.848343198957394*^9}, {
   3.8483447950972195`*^9, 3.8483448052858896`*^9}, {3.848344893484866*^9, 
   3.848344899389894*^9}, 3.848344970377386*^9, {3.848345017411029*^9, 
   3.8483450188533525`*^9}, {3.8483452439848647`*^9, 3.848345286823845*^9}, {
   3.8483454272847185`*^9, 3.848345450090046*^9}, {3.848345486874687*^9, 
   3.8483456213740487`*^9}, {3.848345662297982*^9, 3.848345664340534*^9}, {
   3.8483457848754463`*^9, 3.848345855397236*^9}, {3.8483458922822046`*^9, 
   3.8483459018977575`*^9}, {3.848345940272185*^9, 3.8483459667739325`*^9}, {
   3.8483462852843795`*^9, 3.84834628721595*^9}, {3.8483463440455914`*^9, 
   3.8483463465913916`*^9}, {3.848346404732693*^9, 3.8483464063572254`*^9}, {
   3.8483464540181727`*^9, 3.8483464966189723`*^9}, {3.8483465934007626`*^9, 
   3.848346633607273*^9}, {3.848346790543454*^9, 3.8483469713763494`*^9}, {
   3.848347004003933*^9, 3.848347053043254*^9}, {3.848347159704486*^9, 
   3.8483472042406926`*^9}, {3.8483473316692686`*^9, 
   3.8483474345240707`*^9}, {3.848347502478627*^9, 3.84834750384086*^9}, {
   3.84834758517747*^9, 3.8483476743736825`*^9}, {3.8483477182684975`*^9, 
   3.8483477440122623`*^9}, {3.8483477999058914`*^9, 
   3.8483478057408357`*^9}, {3.8483497019852667`*^9, 
   3.8483497050500536`*^9}, {3.8483497739219403`*^9, 
   3.8483498073570085`*^9}, {3.848349857731205*^9, 3.8483498588532724`*^9}, {
   3.848350140870716*^9, 3.8483501587408724`*^9}, {3.8483501960598717`*^9, 
   3.8483501996012526`*^9}, {3.8483502432610264`*^9, 3.848350248465597*^9}, {
   3.848350316086521*^9, 3.8483503680577583`*^9}, {3.8483504292867603`*^9, 
   3.848350473895302*^9}, {3.848350524224497*^9, 3.8483506030073442`*^9}, {
   3.8483506484737062`*^9, 3.8483506632866735`*^9}, {3.8483507299408903`*^9, 
   3.848350746957679*^9}, 3.848350977981104*^9, {3.8483513325288568`*^9, 
   3.8483513681933517`*^9}, {3.8483514600727053`*^9, 3.848351463732274*^9}, {
   3.848351740122883*^9, 3.848351757320838*^9}, {3.848351991099924*^9, 
   3.8483519978576756`*^9}, {3.848352077341402*^9, 3.8483521560813293`*^9}, {
   3.8483522477699766`*^9, 3.848352266104759*^9}, {3.8483523058084517`*^9, 
   3.848352310436582*^9}, {3.8483524039000125`*^9, 3.8483524091114025`*^9}, {
   3.848352452940795*^9, 3.848352452990883*^9}, {3.848352484905504*^9, 
   3.8483524928908896`*^9}, {3.8483525248771267`*^9, 3.848352527037096*^9}, {
   3.8483525964651384`*^9, 3.8483526015243063`*^9}, 3.848352752475717*^9, {
   3.848352788739566*^9, 3.8483528450189257`*^9}, {3.848352877484872*^9, 
   3.8483528789072027`*^9}, {3.848353094088544*^9, 3.8483531093706975`*^9}, {
   3.848353151157365*^9, 3.8483531548745217`*^9}, {3.848353203957697*^9, 
   3.8483532089536104`*^9}, {3.848367271386554*^9, 3.84836727465804*^9}, {
   3.8483678451799784`*^9, 3.8483680041430173`*^9}, {3.848368102955414*^9, 
   3.8483681855252275`*^9}, {3.8483682196317267`*^9, 3.848368302672468*^9}, {
   3.848368375330162*^9, 
   3.8483683807834234`*^9}},ExpressionUUID->"dc44e351-fd7d-4e51-af3a-\
b7a838d197cd"],

Cell[BoxData[
 RowBox[{"preparePaclet", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8483683069863195`*^9, 3.8483683100070367`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"6bcca223-114a-43bf-9b55-d48e99a8f592"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PacletTools`\>\"", "]"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"28de4b38-ad9e-4803-9b46-d5901defdcb0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ParseRE"}]], "Input",
 CellChangeTimes->{{3.848354309575725*^9, 3.848354311403433*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"87b6c691-c715-48c5-b595-d5aec69566a3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"ParseRE[str] converts a regex in string form to an \
expression in terms of REUnion, REConcat, and REClosure.\\nRecognized \
constructs are (from greatest to least precedence)\\n  - Prefix \\\"\\\\\\\" \
escapes the next character.\\n  - Round parentheses \\\"(\\\" and \\\")\\\" \
indicate grouping.\\n  - Postfix \\\"*\\\" is parsed as closure.\\n  - \
Juxtaposition is interpreted as concatenation.\\n  - Infix \\\"|\\\" is \
parsed as union.\\nAll other characters are interpreted as string literals of \
length 1.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"ParseRE", "[", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
string_String", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "=", 
                    RowBox[{
                    RowBox[{"CreateDataStructure", "[", 
                    RowBox[{"\"Queue\"", ",", 
                    
                    RowBox[{"Characters", "[", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
string", "]"}]}], "]"}], "[", 
                    RowBox[{"\"Push\"", ",", "EndOfString"}], "]"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`expr",
                     "=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`o", 
                    "=", 
                    RowBox[{"RegularLanguages`PackageScope`applyIf", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "\"ParseTree\"", "]"}], ",", 
                    RowBox[{"Map", "[", "Inactive", "]"}], ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"|\"", "\[Rule]", "REUnion"}], ",", 
                    RowBox[{"\".\"", "\[Rule]", "REConcat"}], ",", 
                    RowBox[{"\"*\"", "\[Rule]", "REClosure"}]}], "]"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`o", 
                    "[", "#1", "]"}], "[", "##2", "]"}], "&"}]}], "]"}]}], 
                    ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
binaryQ", "=", 
                    RowBox[{"MatchQ", "[", "\"|\"", "]"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
postfixQ", "=", 
                    RowBox[{"MatchQ", "[", "\"*\"", "]"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`varQ",
                     "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#1", "]"}], "&&", 
                    RowBox[{"StringMatchQ", "[", 
                    RowBox[{"#1", ",", 
                    
                    RowBox[{"RegularExpression", "[", "\"[^*()|\\\\\\\\]\"", 
                    "]"}]}], "]"}]}], "&"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
concatableQ", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#1", "]"}], "&&", 
                    RowBox[{"StringMatchQ", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"RegularExpression", "[", "\"[^*)|]\"", "]"}]}], 
                    "]"}]}], "&"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`prec",
                     "=", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"|\"", "\[Rule]", "0"}], ",", 
                    RowBox[{"\".\"", "\[Rule]", "1"}], ",", 
                    RowBox[{"\"*\"", "\[Rule]", "2"}]}], "]"}]}], ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
rprec", "=", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"|\"", "\[Rule]", "1"}], ",", 
                    RowBox[{"\".\"", "\[Rule]", "2"}], ",", 
                    RowBox[{"\"*\"", "\[Rule]", "2"}]}], "]"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
nprec", "=", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"|\"", "\[Rule]", "0"}], ",", 
                    RowBox[{"\".\"", "\[Rule]", "1"}], ",", 
                    RowBox[{"\"*\"", "\[Rule]", "1"}]}], "]"}]}]}], "}"}], 
                    ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`A", 
                    ",", "RegularLanguages`RegularExpressions`PackagePrivate`\
expectAfter", ",", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
escape"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
expectAfter", "[", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
return_", ",", "RegularLanguages`RegularExpressions`PackagePrivate`c_"}], 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`d", 
                    "=", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Pop\"", "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`d", 
                    ",", "RegularLanguages`RegularExpressions`PackagePrivate`\
c"}], "]"}], ",", "RegularLanguages`RegularExpressions`PackagePrivate`return",
                     ",", 
                    RowBox[{"Throw", "[", 
                    RowBox[{"Failure", "[", 
                    RowBox[{"\"SyntaxError\"", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\"MessageTemplate\"", "\[Rule]", 
                    "\"Expected `1` at position `2` but received `3`.\""}], 
                    ",", 
                    RowBox[{"\"MessageParameters\"", "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`c", 
                    ",", 
                    RowBox[{
                    
                    RowBox[{"StringLength", "[", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
string", "]"}], "-", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Length\"", "]"}]}], ",", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`d"}], 
                    "}"}]}]}], "]"}]}], "]"}], "]"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
escape", "[", "RegularLanguages`RegularExpressions`PackagePrivate`c_", "]"}], 
                    ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`d", 
                    "=", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Pop\"", "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"StringQ", "[", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`d", 
                    "]"}], "&&", 
                    RowBox[{"StringMatchQ", "[", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`d", 
                    ",", 
                    RowBox[{
                    "RegularExpression", "[", "\"[*()|\\\\\\\\]\"", "]"}]}], 
                    "]"}]}], ",", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`d", 
                    ",", 
                    RowBox[{"Throw", "[", 
                    RowBox[{"Failure", "[", 
                    RowBox[{"\"SyntaxError\"", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\"MessageTemplate\"", "\[Rule]", 
                    "\"Unrecognized escape sequence `1``2` at position \
`3`.\""}], ",", 
                    RowBox[{"\"MessageParameters\"", "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`c", 
                    ",", "RegularLanguages`RegularExpressions`PackagePrivate`\
d", ",", 
                    RowBox[{
                    
                    RowBox[{"StringLength", "[", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
string", "]"}], "-", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Length\"", "]"}]}]}], "}"}]}]}], "]"}]}], "]"}], 
                    "]"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`A", 
                    "[", "RegularLanguages`RegularExpressions`PackagePrivate`\
p_", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`t", 
                    "=", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Peek\"", "]"}], ",", "\"(\"", ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
expectAfter", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Pop\"", "]"}], ";", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`A", 
                    "[", "0", "]"}]}], ",", "\")\""}], "]"}], ",", "\"\\\\\"",
                     ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
escape", "[", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Pop\"", "]"}], "]"}], ",", 
                    
                    RowBox[{"_", "?", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`varQ"}\
], ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Pop\"", "]"}], ",", "_", ",", 
                    InterpretationBox[
                    "\"\[CurlyEpsilon]\"", RegularLanguages`Epsilon]}], 
                    "]"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`nxt", 
                    "=", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Peek\"", "]"}]}], ",", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`r", 
                    "=", "2"}], ",", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`s"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"While", "[", 
                    RowBox[{"True", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`t", 
                    "=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
binaryQ", "[", "RegularLanguages`RegularExpressions`PackagePrivate`nxt", 
                    "]"}], "&&", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`p", 
                    "\[LessEqual]", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`prec",
                     "[", "RegularLanguages`RegularExpressions`PackagePrivate`\
nxt", "]"}], "\[LessEqual]", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`r"}]}]\
, ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`expr",
                     "[", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`s", 
                    "=", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Pop\"", "]"}]}], ",", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`t", 
                    ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`A", 
                    "[", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
rprec", "[", "RegularLanguages`RegularExpressions`PackagePrivate`s", "]"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
postfixQ", "[", "RegularLanguages`RegularExpressions`PackagePrivate`nxt", 
                    "]"}], "&&", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`p", 
                    "\[LessEqual]", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`prec",
                     "[", "RegularLanguages`RegularExpressions`PackagePrivate`\
nxt", "]"}], "\[LessEqual]", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`r"}]}]\
, ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`expr",
                     "[", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`s", 
                    "=", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Pop\"", "]"}]}], ",", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`t"}], 
                    "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
concatableQ", "[", "RegularLanguages`RegularExpressions`PackagePrivate`nxt", 
                    "]"}], "&&", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`p", 
                    "\[LessEqual]", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`prec",
                     "[", "\".\"", "]"}], "\[LessEqual]", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`r"}]}]\
, ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`expr",
                     "[", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`s", 
                    "=", "\".\""}], ",", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`t", 
                    ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`A", 
                    "[", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
rprec", "[", "RegularLanguages`RegularExpressions`PackagePrivate`s", "]"}], 
                    "]"}]}], "]"}], ",", "True", ",", 
                    RowBox[{"Break", "[", "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`r", 
                    ",", "RegularLanguages`RegularExpressions`PackagePrivate`\
nxt"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
nprec", "[", "RegularLanguages`RegularExpressions`PackagePrivate`s", "]"}], 
                    ",", 
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`w", 
                    "[", "\"Peek\"", "]"}]}], "}"}]}]}]}], "]"}], ";", 
                    "RegularLanguages`RegularExpressions`PackagePrivate`t"}]}]\
, "]"}]}], ";", 
                    RowBox[{"Catch", "[", 
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`\
expectAfter", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "RegularLanguages`RegularExpressions`PackagePrivate`A", 
                    "[", "0", "]"}], ",", "EndOfString"}], "]"}], "]"}]}]}], 
                    "]"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"\<\"ParseTree\"\>", "\[Rule]", "False"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"RegularLanguages`ParseRE\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"ParseRE[str] converts a regex in string form to an \
expression in terms of REUnion, REConcat, and REClosure.\\nRecognized \
constructs are (from greatest to least precedence)\\n  - Prefix \\\"\\\\\\\" \
escapes the next character.\\n  - Round parentheses \\\"(\\\" and \\\")\\\" \
indicate grouping.\\n  - Postfix \\\"*\\\" is parsed as closure.\\n  - \
Juxtaposition is interpreted as concatenation.\\n  - Infix \\\"|\\\" is \
parsed as union.\\nAll other characters are interpreted as string literals of \
length 1.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "ParseRE[str] converts a regex in string form to an expression in terms \
of REUnion, REConcat, and REClosure.\nRecognized constructs are (from \
greatest to least precedence)\n  - Prefix \"\\\" escapes the next character.\n\
  - Round parentheses \"(\" and \")\" indicate grouping.\n  - Postfix \"*\" \
is parsed as closure.\n  - Juxtaposition is interpreted as concatenation.\n  \
- Infix \"|\" is parsed as union.\nAll other characters are interpreted as \
string literals of length 1.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, RegularLanguages`ParseRE, {RegularLanguages`ParseRE[
         Pattern[RegularLanguages`RegularExpressions`PackagePrivate`string, 
          Blank[String]], 
         OptionsPattern[]] :> 
       With[{RegularLanguages`RegularExpressions`PackagePrivate`w = 
          CreateDataStructure["Queue", 
            Characters[
            RegularLanguages`RegularExpressions`PackagePrivate`string]][
           "Push", EndOfString], 
          RegularLanguages`RegularExpressions`PackagePrivate`expr = 
          With[{RegularLanguages`RegularExpressions`PackagePrivate`o = 
             RegularLanguages`PackageScope`applyIf[
               OptionValue["ParseTree"], 
               Map[Inactive], 
               Association[
               "|" -> RegularLanguages`REUnion, "." -> 
                RegularLanguages`REConcat, "*" -> 
                RegularLanguages`REClosure]]}, 
            RegularLanguages`RegularExpressions`PackagePrivate`o[#][
             SlotSequence[2]]& ], 
          RegularLanguages`RegularExpressions`PackagePrivate`binaryQ = 
          MatchQ["|"], 
          RegularLanguages`RegularExpressions`PackagePrivate`postfixQ = 
          MatchQ["*"], 
          RegularLanguages`RegularExpressions`PackagePrivate`varQ = And[
            StringQ[#], 
            StringMatchQ[#, 
             RegularExpression["[^*()|\\\\]"]]]& , 
          RegularLanguages`RegularExpressions`PackagePrivate`concatableQ = And[
            StringQ[#], 
            StringMatchQ[#, 
             RegularExpression["[^*)|]"]]]& , 
          RegularLanguages`RegularExpressions`PackagePrivate`prec = 
          Association["|" -> 0, "." -> 1, "*" -> 2], 
          RegularLanguages`RegularExpressions`PackagePrivate`rprec = 
          Association["|" -> 1, "." -> 2, "*" -> 2], 
          RegularLanguages`RegularExpressions`PackagePrivate`nprec = 
          Association["|" -> 0, "." -> 1, "*" -> 1]}, 
         Module[{
          RegularLanguages`RegularExpressions`PackagePrivate`A, 
           RegularLanguages`RegularExpressions`PackagePrivate`expectAfter, 
           RegularLanguages`RegularExpressions`PackagePrivate`escape}, 
          RegularLanguages`RegularExpressions`PackagePrivate`expectAfter[
             Pattern[
             RegularLanguages`RegularExpressions`PackagePrivate`return, 
              Blank[]], 
             Pattern[RegularLanguages`RegularExpressions`PackagePrivate`c, 
              Blank[]]] := 
           With[{RegularLanguages`RegularExpressions`PackagePrivate`d = 
              RegularLanguages`RegularExpressions`PackagePrivate`w["Pop"]}, 
             If[
              MatchQ[
              RegularLanguages`RegularExpressions`PackagePrivate`d, 
               RegularLanguages`RegularExpressions`PackagePrivate`c], 
              RegularLanguages`RegularExpressions`PackagePrivate`return, 
              Throw[
               Failure["SyntaxError", 
                Association[
                "MessageTemplate" -> 
                 "Expected `1` at position `2` but received `3`.", 
                 "MessageParameters" -> {
                  RegularLanguages`RegularExpressions`PackagePrivate`c, 
                   StringLength[
                    RegularLanguages`RegularExpressions`PackagePrivate`string]\
 - RegularLanguages`RegularExpressions`PackagePrivate`w["Length"], 
                   RegularLanguages`RegularExpressions`PackagePrivate`d}]]]]]; 
          RegularLanguages`RegularExpressions`PackagePrivate`escape[
             Pattern[RegularLanguages`RegularExpressions`PackagePrivate`c, 
              Blank[]]] := 
           With[{RegularLanguages`RegularExpressions`PackagePrivate`d = 
              RegularLanguages`RegularExpressions`PackagePrivate`w["Pop"]}, 
             If[
              And[
               StringQ[RegularLanguages`RegularExpressions`PackagePrivate`d], 
               StringMatchQ[
               RegularLanguages`RegularExpressions`PackagePrivate`d, 
                RegularExpression["[*()|\\\\]"]]], 
              RegularLanguages`RegularExpressions`PackagePrivate`d, 
              Throw[
               Failure["SyntaxError", 
                Association[
                "MessageTemplate" -> 
                 "Unrecognized escape sequence `1``2` at position `3`.", 
                 "MessageParameters" -> {
                  RegularLanguages`RegularExpressions`PackagePrivate`c, 
                   RegularLanguages`RegularExpressions`PackagePrivate`d, 
                   StringLength[
                    RegularLanguages`RegularExpressions`PackagePrivate`string]\
 - RegularLanguages`RegularExpressions`PackagePrivate`w["Length"]}]]]]]; 
          RegularLanguages`RegularExpressions`PackagePrivate`A[
             Pattern[RegularLanguages`RegularExpressions`PackagePrivate`p, 
              Blank[]]] := 
           Module[{RegularLanguages`RegularExpressions`PackagePrivate`t = 
              Switch[
                RegularLanguages`RegularExpressions`PackagePrivate`w["Peek"], 
                "(", 
                
                RegularLanguages`RegularExpressions`PackagePrivate`\
expectAfter[RegularLanguages`RegularExpressions`PackagePrivate`w["Pop"]; 
                 RegularLanguages`RegularExpressions`PackagePrivate`A[0], 
                 ")"], "\\", 
                RegularLanguages`RegularExpressions`PackagePrivate`escape[
                 RegularLanguages`RegularExpressions`PackagePrivate`w["Pop"]], 
                PatternTest[
                 Blank[], 
                 RegularLanguages`RegularExpressions`PackagePrivate`varQ], 
                RegularLanguages`RegularExpressions`PackagePrivate`w["Pop"], 
                Blank[], RegularLanguages`Epsilon], 
              RegularLanguages`RegularExpressions`PackagePrivate`nxt = 
              RegularLanguages`RegularExpressions`PackagePrivate`w["Peek"], 
              RegularLanguages`RegularExpressions`PackagePrivate`r = 2, 
              RegularLanguages`RegularExpressions`PackagePrivate`s}, 
             While[True, 
               RegularLanguages`RegularExpressions`PackagePrivate`t = Which[
                  And[
                   RegularLanguages`RegularExpressions`PackagePrivate`binaryQ[
                   RegularLanguages`RegularExpressions`PackagePrivate`nxt], 
                   RegularLanguages`RegularExpressions`PackagePrivate`p <= 
                   RegularLanguages`RegularExpressions`PackagePrivate`prec[
                    RegularLanguages`RegularExpressions`PackagePrivate`nxt] <= 
                   RegularLanguages`RegularExpressions`PackagePrivate`r], 
                  RegularLanguages`RegularExpressions`PackagePrivate`expr[
                  RegularLanguages`RegularExpressions`PackagePrivate`s = 
                   RegularLanguages`RegularExpressions`PackagePrivate`w[
                    "Pop"], 
                   RegularLanguages`RegularExpressions`PackagePrivate`t, 
                   RegularLanguages`RegularExpressions`PackagePrivate`A[
                    RegularLanguages`RegularExpressions`PackagePrivate`rprec[
                    RegularLanguages`RegularExpressions`PackagePrivate`s]]], 
                  And[
                   
                   RegularLanguages`RegularExpressions`PackagePrivate`\
postfixQ[RegularLanguages`RegularExpressions`PackagePrivate`nxt], 
                   RegularLanguages`RegularExpressions`PackagePrivate`p <= 
                   RegularLanguages`RegularExpressions`PackagePrivate`prec[
                    RegularLanguages`RegularExpressions`PackagePrivate`nxt] <= 
                   RegularLanguages`RegularExpressions`PackagePrivate`r], 
                  RegularLanguages`RegularExpressions`PackagePrivate`expr[
                  RegularLanguages`RegularExpressions`PackagePrivate`s = 
                   RegularLanguages`RegularExpressions`PackagePrivate`w[
                    "Pop"], 
                   RegularLanguages`RegularExpressions`PackagePrivate`t], 
                  And[
                   
                   RegularLanguages`RegularExpressions`PackagePrivate`\
concatableQ[RegularLanguages`RegularExpressions`PackagePrivate`nxt], 
                   RegularLanguages`RegularExpressions`PackagePrivate`p <= 
                   RegularLanguages`RegularExpressions`PackagePrivate`prec[
                    "."] <= 
                   RegularLanguages`RegularExpressions`PackagePrivate`r], 
                  RegularLanguages`RegularExpressions`PackagePrivate`expr[
                  RegularLanguages`RegularExpressions`PackagePrivate`s = ".", 
                   RegularLanguages`RegularExpressions`PackagePrivate`t, 
                   RegularLanguages`RegularExpressions`PackagePrivate`A[
                    RegularLanguages`RegularExpressions`PackagePrivate`rprec[
                    RegularLanguages`RegularExpressions`PackagePrivate`s]]], 
                  True, 
                  Break[]]; {
                 RegularLanguages`RegularExpressions`PackagePrivate`r, 
                  RegularLanguages`RegularExpressions`PackagePrivate`nxt} = {
                  RegularLanguages`RegularExpressions`PackagePrivate`nprec[
                  RegularLanguages`RegularExpressions`PackagePrivate`s], 
                  RegularLanguages`RegularExpressions`PackagePrivate`w[
                  "Peek"]}]; 
             RegularLanguages`RegularExpressions`PackagePrivate`t]; Catch[
            RegularLanguages`RegularExpressions`PackagePrivate`expectAfter[
             RegularLanguages`RegularExpressions`PackagePrivate`A[0], 
             EndOfString]]]]}], "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {"ParseTree" -> False}, "Attributes" -> {Protected}, 
    "FullName" -> "RegularLanguages`ParseRE"], False]]], "Output",
 CellChangeTimes->{3.848354311507307*^9, 3.8483659964983873`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"3cb02c80-01da-4317-a8ab-032e6f559fe2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParseRE", "[", "\"\<A*b(c|d)\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8483674655373864`*^9, 3.8483674861363735`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"7bc8835a-a776-4a71-9bd5-1564823b184b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   InterpretationBox[
    SuperscriptBox["\<\"A\"\>", "*"],
    RegularLanguages`REClosure["A"]], "\[CenterDot]", "\<\"b\"\>", 
   "\[CenterDot]", 
   RowBox[{"(", 
    InterpretationBox[
     RowBox[{"\<\"c\"\>", "\[VerticalSeparator]", "\<\"d\"\>"}],
     RegularLanguages`REUnion["c", "d"]], ")"}]}],
  RegularLanguages`REConcat[
   RegularLanguages`REClosure["A"], "b", 
   RegularLanguages`REUnion["c", "d"]]]], "Output",
 CellChangeTimes->{{3.848367478237878*^9, 3.8483674863393607`*^9}},
 CellLabel->"Out[19]=",ExpressionUUID->"8abd8881-9e16-4afc-b0d8-27596cdd3549"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createREADME", "[", "\"\<README.md\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8479931013077393`*^9, 3.8479931080690565`*^9}, {
   3.8480817502049704`*^9, 3.848081753380497*^9}, {3.8483499280231156`*^9, 
   3.8483499289313903`*^9}, {3.8483514210874343`*^9, 3.848351421207718*^9}, {
   3.8483517723048334`*^9, 3.848351773564905*^9}, 3.8483532836112967`*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"7e1c5bda-875a-4b8d-88cf-13a3e7604075"],

Cell[BoxData["\<\"README.md\"\>"], "Output",
 CellChangeTimes->{
  3.847993109033729*^9, 3.847993153483513*^9, 3.8480069288504267`*^9, 
   3.8480071779428096`*^9, 3.848007377031602*^9, 3.848008000150302*^9, 
   3.848008092333289*^9, 3.848008156383786*^9, 3.8480082426170025`*^9, 
   3.8480083205835586`*^9, 3.84800837978368*^9, 3.8480085295170107`*^9, 
   3.8480086728670845`*^9, {3.8480087206333776`*^9, 3.84800873596694*^9}, 
   3.848008766150058*^9, 3.8480088651667223`*^9, 3.8480089363668327`*^9, {
   3.848008986222802*^9, 3.8480090118833704`*^9}, 3.8480092402160006`*^9, 
   3.848010715033566*^9, 3.848011590950136*^9, 3.848011802433374*^9, 
   3.848018742950451*^9, 3.8480198228169317`*^9, 3.848027768200333*^9, 
   3.848027943766759*^9, 3.8480281311504602`*^9, {3.8480282791337333`*^9, 
   3.8480283053500657`*^9}, 3.8480283795335836`*^9, 3.848028516883381*^9, 
   3.848028612600398*^9, {3.8480286923337607`*^9, 3.848028710600236*^9}, 
   3.8480287839166355`*^9, 3.848028826350278*^9, 3.848074033297042*^9, 
   3.8480743656134095`*^9, 3.848081723080228*^9, 3.84808175388008*^9, 
   3.848081838147182*^9, 3.8480819032304344`*^9, 3.848081940896863*^9, 
   3.848082562996946*^9, 3.848342370240486*^9, 3.8483425520907526`*^9, 
   3.848342868557627*^9, 3.8483432226406603`*^9, 3.84834339506971*^9, 
   3.8483434869739523`*^9, 3.848344716723981*^9, 3.8483448097199545`*^9, 
   3.8483450242238903`*^9, 3.848349929423846*^9, 3.84835016849044*^9, 
   3.8483502039242215`*^9, 3.848350253890691*^9, 3.8483503765739036`*^9, 
   3.848350449440559*^9, 3.8483504815906043`*^9, 3.8483507537930875`*^9, 
   3.8483509826404905`*^9, 3.848351422419735*^9, 3.8483514876740885`*^9, 
   3.8483517740238647`*^9, {3.84835213192371*^9, 3.8483521610699387`*^9}, 
   3.848352274524023*^9, 3.848352314907246*^9, 3.848352530707006*^9, 
   3.848352626707369*^9, 3.848352849173862*^9, 3.848352889373727*^9, {
   3.8483531347738724`*^9, 3.848353159536368*^9}, 3.8483532146241555`*^9, 
   3.8483532841240616`*^9, 3.84836760419425*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"b4030a11-3308-4d5f-a7c7-7e3a48b16eeb"]
}, Open  ]],

Cell[BoxData["SpellingCorr"], "Input",
 CellChangeTimes->{{3.8483551768588514`*^9, 
  3.8483551853792953`*^9}},ExpressionUUID->"3d81b4f6-5f8c-479f-a745-\
40212ac00f2e"],

Cell[BoxData["89"], "Input",
 CellChangeTimes->{{3.848350896720104*^9, 
  3.8483508967867365`*^9}},ExpressionUUID->"04d9c998-f414-45a5-bbdf-\
597df405bbec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{
   RowBox[{"getUsage", "/@", 
    RowBox[{"Names", "[", "\"\<RegularLanguages`*\>\"", "]"}]}], ",", 
   "\"\<\\n\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8483552126865487`*^9, 3.8483552424506884`*^9}},
 CellLabel->
  "In[1113]:=",ExpressionUUID->"f6ac89d6-e144-415d-88c5-f9ef45360c5f"],

Cell[BoxData["\<\"AddTransitions[nfastate, a -> {q1, q2, ...}] returns an \
NFAState s where s[a] = Union[nfastate[a], {q1, q2, \
...}]\\nAddTransitions[nfastate, {a1 -> {q1, q2, ...}, ...}] returns an \
NFAState s with the specified transitions added.\\nAddTransitions[rules] \
returns an operator form of AddTransitions. AdvancedSimplifyRE[r] applies \
additional techniques of factorization and regular language equivalence to \
simplify the given regular expression.CompoundREQ[expr] returs True if expr \
has head REUnion, REConcat, or REClosure.\\nCompoundREQ[expr, patt] returns \
True if expr is a compound regex and every character in the standard alphabet \
of regex matches patt.DecimalFactorDFA[n] returns a DFA accepting lists of \
digits whose decimal value is divisible by n\\nDecimalFactorDFA[n, True] \
returns a DFA accepting lists of digits whose decimal value is divisible by \
n, as well as the empty list.DeleteUnreachableStates[A] returns an automaton \
whose state set is exactly TransitiveClosure[A]The head DFA represents a \
Deterministic Finite Automaton.\\nDFA[{q1 -> t1, q2 -> t2 , ...}, {q0}, {r1, \
r2, ...}] specifies a DFA with states q1, q2, ..., initial state q0, and \
final states r1, r2, ...,where each ti is a list of transition rules {a1 -> \
s1, a2 -> s2, ...} specifying exactly one state s for each symbol a of the \
alphabet.\\nDFA[{q1 -> {s1, s2, ...}, ...}, {a1, a2, ...}, ...] is an \
alternate form for the above. Here, transitions are given as lists of states, \
and the alphabet is supplied as a second argument.\\nDFA[...][{a1, a2, a3, \
...}] returns True if the given DFA accepts the string of symbols a1 a2 a3...\
\\nDFA[...][symbs, All] returns the sequence of transitions on the given \
symbols as a list of states.\\nDFA[...][symbs, spec] returns a subset of the \
transition sequence, where spec is any sequence \
specification.\\nDFA[...][string, ...] is equivalent to \
DFA[...][Characters[string], ...]\\nDFAQ[x] returns True if x is a valid DFA.\
\\nDFAState[q, <|a1 -> q1, a2 -> q2, ...|>] represents the nonterminal state \
with ID q in a DFA with transitions \[Delta](q, ai) = qi.\\n  - \
Keys[DFAState[q, trns]] is equivalent to Keys[trns].\\n  - Values[DFAState[q, \
trns]] is equivalent to Values[trns].\\nDFAState[q, \[Delta], True] \
represents a terminal state.\\nDFAState[q, \[Delta], {init, term}] represents \
a state which is initial if init is True, and terminal if term is \
True.\\nDFAState[q, ...][a] gives the transition \[Delta](q, a)EmptyFAQ[A] \
returns True if A is an automaton whose language an empty set.EmptyLanguage \
is a symbol representing the language with no elements. In various contexts, \
it can be viewed as the empty set, an automaton with no reachable accepting \
states, the regular expression matching nothing, etc.EntireFAQ[A] yields True \
if A is an automaton which accepts all strings over its alphabet.Epsilon is a \
symbol representing the string of length 0.EpsilonClosure[A] computes the \
epsilon closure (that is, the transitive closure over the empty string) of \
the initial states in the Automaton A.\\nEpsilonClosure[q, A] gives the \
epsilon closure of state q in A.\\nEpsilonClosure[{q1, q2, ...}, A] gives \
EpsilonClosure[q1, A] \[Union] EpsilonClosure[q2, A] \[Union] \
...\\nEpsilonClosure[states, transitions] finds the epsilon closure of states \
in transitions, where transitions can be any transition specification \
recognized by TransitiveClosure. EquivalentFAQ[A1, A2] is True if A1 and A2 \
are automata that recognize the same language.\\nEquivalentFAQ[A1, A2, ...] \
yields true if all Ai are equivalent automata.\\nEquivalentFAQ[A] yields true \
if A is an automaton.EquivalentLanguageQ[L1, L2, ...] returns True if all Li \
are automata or regular expressions that describe the same \
language.ExpandRE[r] expands the given regular expression by distributing \
REConcat over REUnion.FAClosure[A] returns an NFA for the closure of the \
language recognized by A with respect to concatenation.FAComplement[A] \
returns a DFA recognizing the complement of the language recognized by \
A.FAConcat[A1, A2, ...] gives an NFA accepting the concatenation of the \
languages recognized by the Ai.FactorRE[r] attempts to factor the given \
regular expression.FAExpression[A] returns A as an automaton with head NFA or \
DFA.FAExpressionQ[A] returns True if A is a valid Automaton with head NFA or \
DFA.FAGraphQ[G] yields True if G is a graph with a valid \\\"Automaton\\\" \
annotation.FAIntersection[A1, A2, ...] returns a DFA for the intersection of \
the languages recognized by the Ai.FAQ[A] yields True if A is a valid \
representation of a finite automaton.FAReversal[A] returns an NFA recognizing \
the reversal of the language recognized by A.FASymmetricDifference[A1, A2] \
returns a DFA for the symmetric difference of the languages recognized by A1 \
and A2.FAType[A] returns NFA if A is an NFA, or DFA if A is a DFA.FAUnion[A1, \
A2, ...] returns a DFA for the union of the languages recognized by the \
Ai.IDs[A] returns a list of state names for the DFA or NFA A.\\nIDs[A, prop] \
gives the IDs for states with property prop. Valid properties include: \
\\\"Initial\\\", \\\"Terminal\\\", and \\\"Nonterminal\\\".\\nIDs[A, \
\\\"Index\\\"] returns an association of state ids and their indices: <|id1 \
-> 1, id2 -> 2 ...|>.IndexFA[A] returns an automaton isomorphic to A, where \
the ID of each state is its index.InitialQ[state] returns True if state is \
initial.\\nLanguageAlphabet[L] returns the alphabet of the language \
represented by L, where L can be any automaton or regex.\\n  - For an \
automaton A, this is the union of the set of transition characters (which may \
include the empty string) over all states in A.\\n  - For a regular \
expression r, this is the set of all characters in r, where a character is \
defined to be any subexpression expr of r such that\\n      1. neither expr \
nor Head[expr] is one of REUnion, REConcat, REClosure, Regex, or \
EmptyLanguage and\\n      2. expr is not descended from any expression \
satisfying the previous rule.\\n\\nOptions:\\n\\\"IncludeEpsilon\\\" -> True \
| False | Automatic\\n  - True: the returned list always includes Epsilon.\\n \
 - False: the returned list never includes Epsilon.\\n  - Automatic: the \
returned list only includes Epsilon when the language contains explicit \
Epsilon-productions.LinearizeRE[regex] linearizes regex by indexing each \
character occurrence.\\nLinearizeRE[regex, i] linearizes regex by indexing \
each character occurrence, starting at i.\\nLinearizeRE[regex, i, True] \
returns a list {r', {a1, a2, ...}} where r' is the linearization of regex, \
and the ai are the alphabet of r'MinimizeDFA[dfa] returns an equivalent DFA \
with the minimum number of states.\\n\\nOptions:\\n\\\"StateNames\\\" -> \
\\\"Indexed\\\" | \\\"Subset\\\" | \\\"SubsetUnion\\\"\\n  - \\\"Indexed\\\": \
The state IDs of the new automaton are positive integers.\\n  - \
\\\"Subset\\\": State IDs are subsets of the IDs of the original, \
representing equivalence classes in its StatesPartition.\\n  - \
\\\"SubsetUnion\\\": Like \\\"Subset\\\", but state IDs are the unions of \
elements of subsets instead of the subsets themselves.\\n    - Useful when \
the state IDs of the original automatonn are themselves \
lists.\\nMinimizeNFA[nfa] finds an equivalent NFA with fewer states than the \
original through exhaustive search using the Kameda-Weiner algorithm.\\n  - \
If a smaller NFA does not exist, the original is returned.The head NFA \
represents a nondeterministic finite automaton.\\nNFA[{q1 -> t1, q2 -> t2, \
...}, {q01, q02, ...}, {r1, r2, ...}] specifies an NFA with states q1, q2, \
... initial states q01, q02, ..., final states r1, r2, ..., where each ti is \
a list of transitions {a1 -> {s11, s12, ...}, a2 -> {s21, s22, ...}, ...}, \
with keys that are symbols in the alphabet, and values which are lists of \
states.\\n  - Not all transitions must be explicitly specified; for any \
symbol u for which no transition is given from state q, it is assumed \
\[Delta](q, u) = { }.\\n  - Not all states must be explicitly specified; \
states without keys are assumed to have empty transition sets for all \
symbols.\\nNFA[...][{a1, a2, a3, ...}] returns True if the given NFA accepts \
the string of symbols a1 a2 a3...\\nNFA[...][symbs, All] returns the sequence \
of transitions on the given symbols as a list of sets of \
states.\\nNFA[...][symbs, spec] returns a subset of the transition sequence, \
where spec is any sequence specification.NFAQ[A] yields True if A is a valid \
NFA.\\nNFAState[q, <|a -> {q1, q2 ...}, ...|>] represents the nonterminal \
state q in an NFA with transitions \[Delta](q, a) = {q1, q2, ...}.\\n  - \
Keys[NFAState[q, trns]] is equivalent to Keys[trns].\\n  - Values[NFAState[q, \
trns]] is equivalent to Values[trns].\\nNFAState[q, \[Delta], True] \
represents a terminal state.\\nNFAState[q, \[Delta], {init, term}] represents \
a state which is initial if init is True, and terminal if term is \
True.\\nNFAState[q, ...][a] gives the transition \[Delta](q, a). \
NthFromLastNFA[n] returns an NFA accepting the language of strings over \
{\\\"a\\\", \\\"b\\\"} whose n-th from last character is \
\\\"a\\\"\\nNthFromLastNFA[n, c, {c1, c2, ...}] returns an NFA accepting the \
language of strings over {c1, c2, ...} whose n-th from last character is \
c.OptionChecks[f] gives {} by default.\\nSetting OptionChecks[f] = {opt1 -> \
patt1, opt2 -> patt2, ...}, where the opt_i are options of f, and patt_i are \
patterns will ensure that OptionPatterns[f]?(validQ[f]) only matches the opti \
when their values match patti, issuing a message otherwise.ParseRE[str] \
converts a regex in string form to an expression in terms of REUnion, \
REConcat, and REClosure.\\nThe only characters with special interpretations \
are (from greatest to least precedence)\\n  - Prefix \\\"\\\\\\\" escapes the \
next character.\\n  - Round parentheses \\\"(\\\" and \\\")\\\" indicate \
grouping.\\n  - Postfix \\\"*\\\" is parsed as closure.\\n  - Infix \
whitespace is parsed as concatenation.\\n  - Infix \\\"|\\\" is parsed as \
union.\\nAll other characters are parsed as string literals, with \
juxtaposition indicating concatenation.RandomDFA[n,k] gives a random DFA with \
n states on an alphabet of k symbols.RandomNFA[{q1, q2, ...}, {a1, a2, ...}] \
creates a random NFA with states q1, q2, ... and alphabet a1, a2, ... \
.\\nRandomNFA[n, k] creates a random NFA with n states on an alphabet of k \
symbols.\\n  - One of n or k can be a list, like in the above case.\\n  - \
Default state ids are 1, 2, ... , n\\n  - Default symbols are \\\"a\\\", \
\\\"b\\\", ... (ascii character range 97 to 97 + k) if k <= 26, or \
\\\"x1\\\", \\\"x2\\\", ... \\\"xk\\\" otherwise.\\n  - If a function f is \
provided for the \\\"StatesFunction\\\"/\\\"AlphabetFunction\\\" option, the \
states/alphabet will be Array[f, n]/Array[f, k].\\nRandomNFA[..., maxn, maxk] \
specifies each state of the returned NFA should define transitions on no more \
than maxk symbols, and transition to no more than maxn states on any one \
symbol.\\n  - Non-integer values given for maxn/maxk are interpreted as \
factors of the total number of \
states/symbols.\\n\\nOptions:\\n\\\"InitialStates\\\" -> _Integer | \
_?NumericQ\\n  Number of initial states in the returned NFA\\n  - n_Integer: \
n initial states.\\n  - x_?NumericQ: Ceiling[x * n] initial states, where n \
is the total number of states.\\n\\\"TerminalStates\\\" -> _Integer | \
_?NumericQ\\n  Number of terminal states in the returned NFA\\n  - n_Integer: \
n terminal states.\\n  - x_?NumericQ: Ceiling[x * n] terminal states, where n \
is the total number of states.\\n\\\"StatesFunction\\\" -> _\\n  Function to \
generate state names, applied to the list of states or \
Range[n]\\n\\\"AlphabetFunction\\\" -> _\\n  Function to generate alphabet \
symbols, applied to the list of symbols or \
Range[k]\\n\\\"AllStatesReachable\\\" -> True | False\\n  Whether the \
returned NFA must be connected.\\n\\\"EpsilonProbability\\\" -> \
_?(Between[{0, 1}])\\n  The probability of a given state generating an \
Epsilon-transition.RandomRE[n, k] returns a random regular expression on n \
symbols from an alphabet of length k.\\nRandomRE[n,k,p] returns a random \
regular expression of n symbols from an alphabet of length k, where p is the \
probability of grouping.REClosure[e] represents a regex matching the closure \
of expression e with respect to concatenation. This is defined as the set \
{Epsilon, e, ee, eee, ...}.REConcat[e1, e2, ...] represents a regex matching \
the concatenation e1 e2 ... of the expressions ei.ReduceNFA[nfa] attempts to \
return an equivalent NFA with fewer states using a simulated annealing \
heuristic.\\nResults are non-deterministic, and if a smaller equivalent NFA \
is not found, the original is returned.Regex[x] represents the regular \
expression whose language is exactly {x}.\\nUsed to indicate a literal \
outside a compound RE.ReindexFA[A] returns an automaton similar to A, but \
whose states are renamed with positive integers according to the order each \
is visited in a depth-first search from the initial states. By default, the \
returned automaton includes only those states which are reachable from the \
initial.\\nReindexFA[A, True] returns the same, but also keeps disconnected \
components. The resulting automaton is isomorphic to A.RELength[regex] gives \
the number of characters in the regular expression regex. Note that the \
character Epsilon is considered to have length 0.REMatchQ[expr, regex] \
returns True if expr is matched by regex.\\nREMatchQ[regex] represents an \
operator form of REMatchQ.RenameStates[A, f] returns an automaton isomorphic \
to A, with states {f[q1], f[q2], ...}, where {q1, q2, ...} are the states of \
A.RENormal[regex] converts the regex into an expression with head \
RegularExpression recognizing strings from the same language.REQ[expr] yields \
True when expr has head Regex, or satisfies CompoundREQ.\\nREQ[expr, patt] \
gives True if expr is EmptyLanguage or Epsilon, or of the form Regex[x] where \
x matches patt, or is a compound regex where every subexpression at level -1 \
that is not EmptyLanguage or Epsilon matches patt.RESymbolIndex[r, i] is a \
symbolic wrapper representing the i-th occurrence of the symbol r in a \
linearized regex.REUnion[e1, e2, ...] represents a regex matching the union \
e1 | e2 | ... of the expressions ei.SameAlphabetQ[A1, A2, ...] returns true \
if LanguageAlphabet[A1], LanguageAlphabet[A2], ... are equivalent as \
sets.SetInitial[state, bool] returns a copy of state with the property that \
InitialQ[SetInitial[state, bool]] = bool.\\nSetInitial[bool] is an operator \
form of SetInitial that can be applied to states.SetTerminal[state, bool] \
returns a copy of state with the property that TerminalQ[SetTerminal[state, \
bool]] = bool.\\nSetTerminal[bool] is an operator form of SetTerminal that \
can be applied to states.SimplifyRE[r] attempts to simplify the provided \
regular expression using simple pattern matching.StateCount[A] returns the \
number of states in the automaton A.\\nStateCount[A, prop] returns the number \
of states in A with property prop. Valid properties include: \\\"Initial\\\", \
\\\"Terminal\\\", and \\\"Nonterminal\\\".StateID[q] returns the id of q, \
where q is an expression with head NFAState or DFAState.StateQ[expr] returns \
True if expr has head NFAState or DFAStateStates[A] returns an association \
<|id -> state, ...|> of all states in the DFA or NFA A.\\nStates[A, \
\\\"Values\\\"] returns a list {state1, state2, ...} of all states in the DFA \
or NFA A.\\nStates[A, prop] returns an association <|id -> state, ...|> of \
states with the property prop. Valid properties include  \\\"Initial\\\", \
\\\"Terminal\\\", and \\\"Nonterminal\\\".\\nStates[A, prop, \\\"Values\\\"] \
returns a list of states with the property prop.StatesPartition[dfa] returns \
a list of partition blocks for the states of dfa according to the \
equivalence: p ~ q iff for all words w over the alphabet, reading w starting \
from state p ends in an accepting state exactly when the same is true \
starting from q.StateSuccessors[q] returns a list of IDs comprising the set \
of states to which q has an outgoing transition.\\nStateSuccessors[q, {a1, \
a2, ...}] returns the set of states to which q has an outgoing transition on \
one of the symbols ai.SubsetFAQ[A1, A2] returns True if the language \
recognized by automaton A1 is a subset of the language recognized by \
automaton A2.\\nSubsetFAQ[A, A1, A2, ...] yields True if SubsetFAQ[A, Ai] is \
true for all Ai.\\nSubsetFAQ[A] represents an operator form of SubsetFAQ that \
can be applied to an expression.SubsetLanguageQ[L1, L2] yields True if the \
language recognized by automaton or regular expression L1 is a subset of the \
language recognized by L2.\\nSubsetLanguageQ[L, L1, L2, ...] returns True if \
SubsetLanguageQ[L, Li] is True for all Li.\\nSubsetLanguageQ[L] represents an \
operator form of SubsetLanguageQ that can be applied to an expression. \
TerminalQ[state] gives True if state is a terminal dfa or nfa \
state.ToDFA[dfa] returns the given DFA.\\nToDFA[nfa] converts an NFA into an \
equivalent DFA.\\nToDFA[nfa, alphabet] converts an NFA into an equivalent DFA \
with the given LanguageAlphabet.\\nToDFA[regex] converts a regular expression \
into a DFA by way of an intermediate NFA.\\n\\nOptions:\\nMethod -> Automatic \
| \\\"Minimal\\\"\\n  - \\\"Minimal\\\": Returned DFA will have minimal \
states. Equivalent to calling MinimizeDFA on the result.\\n  - Automatic: Use \
the subset method for NFAs and regexes.\\n\\n\\\"StateNames\\\" -> \
\\\"Index\\\" | \\\"Subset\\\"\\n  - \\\"Index\\\": Returned dfa has states \
with integer ids that correspond to their index in States[dfa].\\n  - \
\\\"Subset\\\": state ids correspond to subsets of the original set of \
states.\\n    - When constructed from an NFA with Method -> \
\\\"Automatic\\\", these are the states from the subset method.ToNFA[A] \
converts the automaton A into an NFA.\\nToNFA[regex] converts the regular \
expression regex into an NFA.ToRE[A] converts the automaton A to an \
equivalent regular expression.Transitions[dfastate] gives the transition \
table for a dfa state as the association <|a1 -> q1, ...|>, where ai is a \
character in the input alphabet, and qi is the id of \[Delta](dfastate, ai)].\
\\nTransitions[nfastate] gives the transition table for an nfa state as the \
association <|a1 -> listi, ...|>, where ai is a character in the input \
alphabet, and listi is the list {q1, q2, ...} of state ids corresponding to \
\[Delta](nfastate, ai)].\\nTransitions[q, spec...] is equivalent to \
Lookup[Transitions[q], spec...] if q is an explicit DFA or NFA \
state.\\nTransitions[{q1, q2, ...}, spec...] is equivalent to \
Lookup[{Transitions[q1], Transitions[q2], ...}, spec...], provided all qi \
have head NFAState, or all qi have head DFAState.TransitiveClosure[q, A] \
returns the transitive closure of state q in automaton \
A.\\nTransitiveClosure[{q1, q2, ...}, A] returns the union \
(TransitiveClosure[q2,A] \[Union] TransitiveClosure[q2, A] \[Union] \
...)\\nTransitiveClosure[A] returns the transitive closure of the initial \
states of automaton A.\\nTransitiveClosure[states, transitions] returns the \
transitive closure of the given states according to the given transition \
specifications. The parameter transitions should be an association or list of \
rules of the form q -> t, where q is a state id, and t is the transition \
table for q as an association or list of rules.\\nTransitiveClosure[..., {a1, \
a2, ...}] gives the transitive closure over the set of symbols a1, a2, \
...UseNotation[use] can be evaluated to add or remove extra notational forms.\
\\nUseNotation[True] is evaluated automatically on package load, and makes \
the following changes:\\nREUnion[a, b,...] formats as a \[VerticalSeparator] \
b \[VerticalSeparator] ... (\\\\[VerticalSeparator], alias \[AliasIndicator]|\
\[AliasIndicator]). VerticalSeparator is redefined to alias \
REUnion.\\nREConcat[a, b,...] formats as a \[CenterDot] b \[CenterDot] ... \
(\\\\[CenterDot], alias \[AliasIndicator].\[AliasIndicator]). CenterDot is \
redefined to alias REConcat.\\nREClosure[a] formats as a* (SuperStar[a], \
shortcut Ctrl + ^, * ). SuperStar is redefined to alias REClosure.\\nEpsilon \
formats as \[CurlyEpsilon], (\\\\[CurlyEpsilon], alias \[AliasIndicator]ce\
\[AliasIndicator]) and \[CurlyEpsilon] will be set to Epsilon if it is not \
yet defined.\\nEmptyLanguage formats as \[EmptySet] (\\\\[EmptySet], alias \
\[AliasIndicator]es\[AliasIndicator]), and \[EmptySet] will be set to \
EmptyLanguage if it is not yet defined.\\nUseNotation[False] removes all \
extra definitions and formatting rules.The pattern \
OptionsPattern[]?(validQ[f]) will only match a rule whose lhs is a key in \
optionChecks[f] when its rhs matches the associated pattern in \
optionChecks[f].\\n\"\>"], "Output",
 CellChangeTimes->{{3.848355231267742*^9, 3.848355243169799*^9}},
 CellLabel->
  "Out[1113]=",ExpressionUUID->"652efa3e-573b-42e7-a4dd-f4c4fe38e4c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Remove", "/@"}]], "Input",
 CellChangeTimes->{{3.8483665738760796`*^9, 
  3.848366631239086*^9}},ExpressionUUID->"5a80d71c-a006-4018-a82e-\
cdbb86df07e2"],

Cell[BoxData[
 TemplateBox[{
  "Protect", "pssl", 
   "\"\\!\\(\\*RowBox[{\\\"Names\\\", \\\"[\\\", \
\\\"\\\\\\\"RegularLanguages`*\\\\\\\"\\\", \\\"]\\\"}]\\) is not a string, \
symbol, or list of strings and symbols.\"", 2, 21, 9, 30684691270978990010, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.8483665966013613`*^9, 3.8483666094044466`*^9}},
 CellLabel->
  "During evaluation of \
In[21]:=",ExpressionUUID->"717e97be-44c5-45c7-9add-6005ac181fec"],

Cell[BoxData[
 TemplateBox[{
  "Protect", "pssl", 
   "\"\\!\\(\\*RowBox[{\\\"Remove\\\", \\\"[\\\", RowBox[{\\\"Names\\\", \
\\\"[\\\", \\\"\\\\\\\"RegularLanguages`*\\\\\\\"\\\", \\\"]\\\"}], \
\\\"]\\\"}]\\) is not a string, symbol, or list of strings and symbols.\"", 2,
    21, 10, 30684691270978990010, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.8483665966013613`*^9, 3.848366609415835*^9}},
 CellLabel->
  "During evaluation of \
In[21]:=",ExpressionUUID->"141186b0-b6cd-40bd-89ec-6bfa58ad5ff3"],

Cell[BoxData[
 RowBox[{"Unprotect", "[", 
  RowBox[{"Remove", "[", 
   RowBox[{"Names", "[", "\<\"RegularLanguages`*\"\>", "]"}], "]"}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.848366596649294*^9, 3.8483666094254203`*^9}},
 CellLabel->"Out[21]=",ExpressionUUID->"3599ad76-d5d9-4386-999a-3cded5903579"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Remove", "/@", 
  RowBox[{"Names", "[", "\"\<RegularLanguages`*\>\"", "]"}]}]], "Input",
 CellChangeTimes->{3.84836664157193*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"7f8cf284-6179-4d01-9bd2-27bb0edfe4a8"],

Cell[BoxData[
 TemplateBox[{
  "Remove", "rmptc", 
   "\"Symbol \\!\\(\\*InterpretationBox[\\\"\\\\\\\"\[EmptySet]\\\\\\\"\\\", \
EmptyLanguage]\\) is Protected and cannot be removed.\"", 2, 23, 11, 
   30684691270978990010, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.848366643123452*^9},
 CellLabel->
  "During evaluation of \
In[23]:=",ExpressionUUID->"ead5a0a4-2a94-449e-9c37-06b3a2187049"],

Cell[BoxData[
 TemplateBox[{
  "Remove", "rmptc", 
   "\"Symbol \\!\\(\\*InterpretationBox[\\\"\\\\\\\"\[CurlyEpsilon]\\\\\\\"\\\
\", Epsilon]\\) is Protected and cannot be removed.\"", 2, 23, 12, 
   30684691270978990010, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8483666431383505`*^9},
 CellLabel->
  "During evaluation of \
In[23]:=",ExpressionUUID->"8753c627-0bb6-4758-adda-ae4993bc34c1"],

Cell[BoxData[
 TemplateBox[{
  "Remove", "rmptc", 
   "\"Symbol \\!\\(\\*RowBox[{\\\"REClosure\\\"}]\\) is Protected and cannot \
be removed.\"", 2, 23, 13, 30684691270978990010, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.848366643151697*^9},
 CellLabel->
  "During evaluation of \
In[23]:=",ExpressionUUID->"16e9cae2-7671-4ede-95dd-2e969c12c95e"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Remove\\\", \\\"::\\\", \
\\\"rmptc\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 23, 14, 30684691270978990010, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8483666431651716`*^9},
 CellLabel->
  "During evaluation of \
In[23]:=",ExpressionUUID->"4391b51b-c541-464c-9528-0203f277f605"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8483666327170258`*^9, 3.8483666431774006`*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"799edcd0-888e-403c-b408-67ad48d09608"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<RegularLanguages`*\>\"", "]"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"1905ef2a-848a-4225-ac0e-5b07a0b4678c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"EmptyLanguage\"\>", ",", "\<\"Epsilon\"\>", 
   ",", "\<\"REClosure\"\>", ",", "\<\"REConcat\"\>", 
   ",", "\<\"REUnion\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.848366648329204*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"4bfcbf23-a7d6-453d-8808-e61b00cb9aa7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegularLanguages`*"}]], "Input",
 CellChangeTimes->{{3.8483666619791875`*^9, 3.8483666695806007`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"cfe9dcd2-6e59-420b-8fb6-2f1cd1dbf079"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["RegularLanguages`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["RegularLanguages`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["EmptyLanguage", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-60c22439-4868-4da3-99be-c45d10fe58cb", {
                   "EmptyLanguage", "RegularLanguages`"}, False},
                 ButtonNote->"RegularLanguages`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Epsilon", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-60c22439-4868-4da3-99be-c45d10fe58cb", {
                   "Epsilon", "RegularLanguages`"}, False},
                 ButtonNote->"RegularLanguages`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["REClosure", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-60c22439-4868-4da3-99be-c45d10fe58cb", {
                   "REClosure", "RegularLanguages`"}, False},
                 ButtonNote->"RegularLanguages`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["REConcat", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-60c22439-4868-4da3-99be-c45d10fe58cb", {
                   "REConcat", "RegularLanguages`"}, False},
                 ButtonNote->"RegularLanguages`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["REUnion", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-60c22439-4868-4da3-99be-c45d10fe58cb", {
                   "REUnion", "RegularLanguages`"}, False},
                 ButtonNote->"RegularLanguages`",
                 Evaluator->Automatic]}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{3.8483666703062477`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"d9e777c3-a553-4dfc-8ab8-cb868513b7d0"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"EmptyLanguage is a symbol representing the language \
with no elements. In various contexts, it can be viewed as the empty set, an \
automaton with no reachable accepting states, the regular expression matching \
nothing, etc.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  
                  StyleBox["\<\" UpValue Definitions\"\>", 
                   "InformationRowLabel",
                   StripOnInput->False],
                  "\"UpValues\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "UpValues", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    InterpretationBox[
                    "\"\[EmptySet]\"", RegularLanguages`EmptyLanguage], "]"}],
                     "^=", "\"\[EmptySet]\""}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]},
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  
                  StyleBox["\<\" Format Definitions\"\>", 
                   "InformationRowLabel",
                   StripOnInput->False],
                  "\"FormatValues\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "FormatValues", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    StyleBox[
                    "EmptyLanguage /: MakeBoxes[EmptyLanguage, \
TraditionalForm] := \
With[{RegularLanguages`RegularLanguages`PackagePrivate`boxes = MakeBoxes[\"\
\[EmptySet]\", TraditionalForm]}, \
InterpretationBox[RegularLanguages`RegularLanguages`PackagePrivate`boxes, \
EmptyLanguage]]", ShowStringCharacters -> True, NumberMarks -> True]}, {" "}, {
                    StyleBox[
                    "EmptyLanguage /: MakeBoxes[EmptyLanguage, \
RegularLanguages`RegularLanguages`PackagePrivate`form:TraditionalForm | \
StandardForm] := With[{RegularLanguages`RegularLanguages`PackagePrivate`boxes \
= MakeBoxes[\"\[EmptySet]\", \
RegularLanguages`RegularLanguages`PackagePrivate`form]}, \
InterpretationBox[RegularLanguages`RegularLanguages`PackagePrivate`boxes, \
EmptyLanguage]]", ShowStringCharacters -> True, NumberMarks -> True]}, {" "}},
                   ColumnAlignments -> Left, 
                  GridBaseline -> {Baseline, {1, 1}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"RegularLanguages`EmptyLanguage\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"EmptyLanguage is a symbol representing the language \
with no elements. In various contexts, it can be viewed as the empty set, an \
automaton with no reachable accepting states, the regular expression matching \
nothing, etc.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "EmptyLanguage is a symbol representing the language with no elements. In \
various contexts, it can be viewed as the empty set, an automaton with no \
reachable accepting states, the regular expression matching nothing, etc.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    Information`InformationValueForm[
     UpValues, RegularLanguages`EmptyLanguage, {
      ToString[RegularLanguages`EmptyLanguage] -> "\[EmptySet]"}], 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> 
    Information`InformationValueForm[
     FormatValues, RegularLanguages`EmptyLanguage, {
      MakeBoxes[RegularLanguages`EmptyLanguage, TraditionalForm] :> 
       With[{RegularLanguages`RegularLanguages`PackagePrivate`boxes = 
          MakeBoxes["\[EmptySet]", TraditionalForm]}, 
         InterpretationBox[
         RegularLanguages`RegularLanguages`PackagePrivate`boxes, 
          RegularLanguages`EmptyLanguage]], 
       MakeBoxes[RegularLanguages`EmptyLanguage, 
         Pattern[RegularLanguages`RegularLanguages`PackagePrivate`form, 
          Alternatives[TraditionalForm, StandardForm]]] :> 
       With[{RegularLanguages`RegularLanguages`PackagePrivate`boxes = 
          MakeBoxes[
           "\[EmptySet]", 
            RegularLanguages`RegularLanguages`PackagePrivate`form]}, 
         InterpretationBox[
         RegularLanguages`RegularLanguages`PackagePrivate`boxes, 
          RegularLanguages`EmptyLanguage]]}], "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> 
    "RegularLanguages`EmptyLanguage"], False]]], "Print",
 CellTags->
  "Info-60c22439-4868-4da3-99be-c45d10fe58cb",ExpressionUUID->"aa636c06-7dcd-\
4e35-8805-1f2f9845d750"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Unprotect", "[", "EmptyLanguage", "]"}]], "Input",
 CellChangeTimes->{{3.848366687887701*^9, 3.848366697368198*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"3e542ee1-0d09-4e79-a67b-cb401fead22e"],

Cell[BoxData[
 RowBox[{"{", "\<\"EmptyLanguage\"\>", "}"}]], "Output",
 CellChangeTimes->{3.8483666976803026`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"5b99b829-be17-44c0-8306-00c01e5760d8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Remove", "[", "EmptyLanguage", "]"}]], "Input",
 CellChangeTimes->{{3.8483666997959285`*^9, 3.848366703046209*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"fb95f50b-ec54-48e4-830e-9f37daeace01"],

Cell[CellGroupData[{

Cell[BoxData["RegularLanguages`EmptyLanguage"], "Input",
 CellChangeTimes->{{3.848366706476787*^9, 3.8483667108477435`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"c26a54a4-7d12-44cf-8daf-a2e0763298bd"],

Cell[BoxData["EmptyLanguage"], "Output",
 CellChangeTimes->{3.84836671128034*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"029c123b-b909-46c8-be26-24106ac771a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["\[CurlyEpsilon]"], "Input",
 CellChangeTimes->{{3.8483667138431497`*^9, 3.848366719005116*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"497517ea-dfcd-4b63-9977-cf0c73b6c20c"],

Cell[BoxData[
 TagBox[
  RowBox[{"Removed", "[", "\<\"Epsilon\"\>", "]"}],
  False,
  Editable->False]], "Output",
 CellChangeTimes->{3.8483667196726418`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"261a0927-191f-4c51-894e-8df1b6d4bd4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[CurlyEpsilon]", "=."}]], "Input",
 CellChangeTimes->{{3.848366731499098*^9, 3.848366734460014*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"c7fa1933-7e03-485b-817d-016728e154b7"],

Cell[BoxData[
 TemplateBox[{
  "Unset", "wrsym", 
   "\"Symbol \\!\\(\\*RowBox[{\\\"\[CurlyEpsilon]\\\"}]\\) is Protected.\"", 
   2, 30, 15, 30684691270978990010, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.848366734897422*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"849789e5-7d63-4481-8401-0812bfd806ae"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.848366734913686*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"a7119fc2-37ef-4b29-bb72-590dc245eed1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$UserBasePacletsDirectory"], "Input",
 CellChangeTimes->{{3.848367791161562*^9, 3.8483677948657784`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"435484ae-c60a-4a16-b48a-a96e3948ec81"],

Cell[BoxData["\<\"C:\\\\Users\\\\kvlox\\\\AppData\\\\Roaming\\\\Mathematica\\\
\\Paclets\"\>"], "Output",
 CellChangeTimes->{3.8483677952964706`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"322525c5-4ca6-492e-8a45-bf18eb6ef5b5"]
}, Open  ]]
},
WindowSize->{1341., 724.5},
WindowMargins->{{Automatic, -1733.5}, {-128.5, Automatic}},
TaggingRules->Association["TryRealOnly" -> False],
InputAliases->Association["intt" -> RowBox[{"\[Integral]", 
     RowBox[{"\[SelectionPlaceholder]", 
       RowBox[{"\[DifferentialD]", "\[Placeholder]"}]}]}], "dintt" -> RowBox[{
     SubsuperscriptBox[
     "\[Integral]", "\[SelectionPlaceholder]", "\[Placeholder]"], 
     RowBox[{"\[Placeholder]", 
       RowBox[{"\[DifferentialD]", "\[Placeholder]"}]}]}], "rintt" -> RowBox[{
     UnderscriptBox["\[Integral]", 
      RowBox[{"\[SelectionPlaceholder]", "\[Element]", "\[Placeholder]"}]], 
     "\[Placeholder]"}], "sumt" -> RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"\[SelectionPlaceholder]", "=", "\[Placeholder]"}], 
      "\[Placeholder]"], "\[Placeholder]"}], "prodt" -> RowBox[{
     UnderoverscriptBox["\[Product]", 
      RowBox[{"\[SelectionPlaceholder]", "=", "\[Placeholder]"}], 
      "\[Placeholder]"], "\[Placeholder]"}], "dt" -> RowBox[{
     SubscriptBox["\[PartialD]", "\[SelectionPlaceholder]"], 
     "\[Placeholder]"}], "cbrt" -> 
  RadicalBox[
   "\[SelectionPlaceholder]", "3", SurdForm -> True, MultilineFunction -> 
    None], "surd" -> 
  RadicalBox[
   "\[SelectionPlaceholder]", "\[Placeholder]", SurdForm -> True, 
    MultilineFunction -> None], "ket" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Ket"], "bra" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Bra"], "braket" -> 
  TemplateBox[{"\[SelectionPlaceholder]", "\[Placeholder]"}, "BraKet"], 
  "delay" -> TemplateBox[{"\[SelectionPlaceholder]"}, "SystemsModelDelay"], 
  "grad" -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], "\[Placeholder]"}], 
  "del." -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], ".", 
     "\[Placeholder]"}], "delx" -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], "\[Cross]", 
     "\[Placeholder]"}], "del2" -> RowBox[{
     SubsuperscriptBox["\[Del]", "\[SelectionPlaceholder]", 2], 
     "\[Placeholder]"}], "kd" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "KroneckerDeltaSeq"], "algs" -> 
  TemplateBox[{}, "Algebraics"], "bools" -> TemplateBox[{}, "Booleans"], 
  "comps" -> TemplateBox[{}, "Complexes"], "ints" -> 
  TemplateBox[{}, "Integers"], "pris" -> TemplateBox[{}, "Primes"], "rats" -> 
  TemplateBox[{}, "Rationals"], "reals" -> TemplateBox[{}, "Reals"], "pints" -> 
  TemplateBox[{}, "PositiveIntegers"], "npints" -> 
  TemplateBox[{}, "NonPositiveIntegers"], "nnints" -> 
  TemplateBox[{}, "NonNegativeIntegers"], "nints" -> 
  TemplateBox[{}, "NegativeIntegers"], "prats" -> 
  TemplateBox[{}, "PositiveRationals"], "nprats" -> 
  TemplateBox[{}, "NonPositiveRationals"], "nnrats" -> 
  TemplateBox[{}, "NonNegativeRationals"], "nrats" -> 
  TemplateBox[{}, "NegativeRationals"], "preals" -> 
  TemplateBox[{}, "PositiveReals"], "npreals" -> 
  TemplateBox[{}, "NonPositiveReals"], "nnreals" -> 
  TemplateBox[{}, "NonNegativeReals"], "nreals" -> 
  TemplateBox[{}, "NegativeReals"], "dlim" -> RowBox[{
     UnderscriptBox["\[Limit]", 
      RowBox[{"\[SelectionPlaceholder]", 
        UnderscriptBox["\[Rule]", 
         TemplateBox[{}, "Integers"]], "\[Infinity]"}]], "\[Placeholder]"}], 
  "dMlim" -> RowBox[{
     UnderscriptBox["\[MaxLimit]", 
      RowBox[{"\[SelectionPlaceholder]", 
        UnderscriptBox["\[Rule]", 
         TemplateBox[{}, "Integers"]], "\[Infinity]"}]], "\[Placeholder]"}], 
  "dmlim" -> RowBox[{
     UnderscriptBox["\[MinLimit]", 
      RowBox[{"\[SelectionPlaceholder]", 
        UnderscriptBox["\[Rule]", 
         TemplateBox[{}, "Integers"]], "\[Infinity]"}]], "\[Placeholder]"}], 
  "tue" -> OverscriptBox["\[UndirectedEdge]", "\[Placeholder]"], "tde" -> 
  OverscriptBox["\[DirectedEdge]", "\[Placeholder]"], "cB" -> 
  TemplateBox[{}, "CombinatorB"], "cC" -> TemplateBox[{}, "CombinatorC"], 
  "cI" -> TemplateBox[{}, "CombinatorI"], "cK" -> 
  TemplateBox[{}, "CombinatorK"], "cS" -> TemplateBox[{}, "CombinatorS"], 
  "cW" -> TemplateBox[{}, "CombinatorW"], "cY" -> 
  TemplateBox[{}, "CombinatorY"]],
Magnification:>1. Inherited,
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"dcb9e4dd-4d97-4409-9593-85502bb0a1c8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info-60c22439-4868-4da3-99be-c45d10fe58cb"->{
  Cell[106769, 2145, 13269, 317, 82, "Print",ExpressionUUID->"aa636c06-7dcd-4e35-8805-1f2f9845d750",
   CellTags->"Info-60c22439-4868-4da3-99be-c45d10fe58cb"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info-60c22439-4868-4da3-99be-c45d10fe58cb", 127257, 2632}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 208, 3, 28, "Input",ExpressionUUID->"04ca7c67-29a0-41e3-8422-5c8c906c906c"],
Cell[769, 25, 468, 10, 64, "Input",ExpressionUUID->"f3cc5d9e-1a12-45f9-9c65-ef2b7f7fe525",
 InitializationCell->True],
Cell[1240, 37, 646, 15, 64, "Input",ExpressionUUID->"36b48813-da7f-4bf8-b360-230a46163bce",
 InitializationCell->True],
Cell[1889, 54, 29191, 570, 2044, "Input",ExpressionUUID->"dc44e351-fd7d-4e51-af3a-b7a838d197cd",
 InitializationCell->True],
Cell[31083, 626, 210, 3, 28, "Input",ExpressionUUID->"6bcca223-114a-43bf-9b55-d48e99a8f592"],
Cell[31296, 631, 156, 2, 28, "Input",ExpressionUUID->"28de4b38-ad9e-4803-9b46-d5901defdcb0"],
Cell[CellGroupData[{
Cell[31477, 637, 199, 4, 28, "Input",ExpressionUUID->"87b6c691-c715-48c5-b595-d5aec69566a3"],
Cell[31679, 643, 40613, 884, 271, "Output",ExpressionUUID->"3cb02c80-01da-4317-a8ab-032e6f559fe2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72329, 1532, 224, 3, 28, "Input",ExpressionUUID->"7bc8835a-a776-4a71-9bd5-1564823b184b"],
Cell[72556, 1537, 618, 15, 33, "Output",ExpressionUUID->"8abd8881-9e16-4afc-b0d8-27596cdd3549"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73211, 1557, 460, 6, 28, "Input",ExpressionUUID->"7e1c5bda-875a-4b8d-88cf-13a3e7604075"],
Cell[73674, 1565, 2087, 29, 32, "Output",ExpressionUUID->"b4030a11-3308-4d5f-a7c7-7e3a48b16eeb"]
}, Open  ]],
Cell[75776, 1597, 168, 3, 28, "Input",ExpressionUUID->"3d81b4f6-5f8c-479f-a745-40212ac00f2e"],
Cell[75947, 1602, 156, 3, 28, "Input",ExpressionUUID->"04d9c998-f414-45a5-bbdf-597df405bbec"],
Cell[CellGroupData[{
Cell[76128, 1609, 345, 8, 28, "Input",ExpressionUUID->"f6ac89d6-e144-415d-88c5-f9ef45360c5f"],
Cell[76476, 1619, 21280, 285, 3667, "Output",ExpressionUUID->"652efa3e-573b-42e7-a4dd-f4c4fe38e4c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97793, 1909, 178, 4, 28, "Input",ExpressionUUID->"5a80d71c-a006-4018-a82e-cdbb86df07e2"],
Cell[97974, 1915, 485, 11, 28, "Message",ExpressionUUID->"717e97be-44c5-45c7-9add-6005ac181fec"],
Cell[98462, 1928, 532, 11, 28, "Message",ExpressionUUID->"141186b0-b6cd-40bd-89ec-6bfa58ad5ff3"],
Cell[98997, 1941, 304, 6, 32, "Output",ExpressionUUID->"3599ad76-d5d9-4386-999a-3cded5903579"]
}, Open  ]],
Cell[CellGroupData[{
Cell[99338, 1952, 232, 4, 28, "Input",ExpressionUUID->"7f8cf284-6179-4d01-9bd2-27bb0edfe4a8"],
Cell[99573, 1958, 422, 10, 28, "Message",ExpressionUUID->"ead5a0a4-2a94-449e-9c37-06b3a2187049"],
Cell[99998, 1970, 422, 10, 28, "Message",ExpressionUUID->"8753c627-0bb6-4758-adda-ae4993bc34c1"],
Cell[100423, 1982, 376, 9, 28, "Message",ExpressionUUID->"16e9cae2-7671-4ede-95dd-2e969c12c95e"],
Cell[100802, 1993, 454, 10, 28, "Message",ExpressionUUID->"4391b51b-c541-464c-9528-0203f277f605"],
Cell[101259, 2005, 270, 5, 32, "Output",ExpressionUUID->"799edcd0-888e-403c-b408-67ad48d09608"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101566, 2015, 162, 2, 28, "Input",ExpressionUUID->"1905ef2a-848a-4225-ac0e-5b07a0b4678c"],
Cell[101731, 2019, 311, 6, 32, "Output",ExpressionUUID->"4bfcbf23-a7d6-453d-8808-e61b00cb9aa7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102079, 2030, 210, 3, 28, "Input",ExpressionUUID->"cfe9dcd2-6e59-420b-8fb6-2f1cd1dbf079"],
Cell[102292, 2035, 4474, 108, 95, "Output",ExpressionUUID->"d9e777c3-a553-4dfc-8ab8-cb868513b7d0"],
Cell[106769, 2145, 13269, 317, 82, "Print",ExpressionUUID->"aa636c06-7dcd-4e35-8805-1f2f9845d750",
 CellTags->"Info-60c22439-4868-4da3-99be-c45d10fe58cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120075, 2467, 219, 3, 28, "Input",ExpressionUUID->"3e542ee1-0d09-4e79-a67b-cb401fead22e"],
Cell[120297, 2472, 193, 3, 32, "Output",ExpressionUUID->"5b99b829-be17-44c0-8306-00c01e5760d8"]
}, Open  ]],
Cell[120505, 2478, 218, 3, 28, "Input",ExpressionUUID->"fb95f50b-ec54-48e4-830e-9f37daeace01"],
Cell[CellGroupData[{
Cell[120748, 2485, 203, 2, 28, "Input",ExpressionUUID->"c26a54a4-7d12-44cf-8daf-a2e0763298bd"],
Cell[120954, 2489, 160, 2, 32, "Output",ExpressionUUID->"029c123b-b909-46c8-be26-24106ac771a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121151, 2496, 188, 2, 28, "Input",ExpressionUUID->"497517ea-dfcd-4b63-9977-cf0c73b6c20c"],
Cell[121342, 2500, 237, 6, 32, "Output",ExpressionUUID->"261a0927-191f-4c51-894e-8df1b6d4bd4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121616, 2511, 204, 3, 28, "Input",ExpressionUUID->"c7fa1933-7e03-485b-817d-016728e154b7"],
Cell[121823, 2516, 361, 9, 28, "Message",ExpressionUUID->"849789e5-7d63-4481-8401-0812bfd806ae"],
Cell[122187, 2527, 155, 2, 32, "Output",ExpressionUUID->"a7119fc2-37ef-4b29-bb72-590dc245eed1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122379, 2534, 198, 2, 28, "Input",ExpressionUUID->"435484ae-c60a-4a16-b48a-a96e3948ec81"],
Cell[122580, 2538, 228, 3, 32, "Output",ExpressionUUID->"322525c5-4ca6-492e-8a45-bf18eb6ef5b5"]
}, Open  ]]
}
]
*)

